{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAdrs","setWalletAdrs","inpValue","setInpValue","gifList","setGifList","checkWallet","a","window","solana","console","log","isPhantom","connect","onlyIfTrusted","res","publicKey","toString","useEffect","onLoad","addEventListener","removeEventListener","getGifList","provider","getProvider","program","Program","account","fetch","connectWallet","connection","Connection","Provider","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","sendGif","length","addGif","className","onClick","onSubmit","event","preventDefault","type","value","onChange","e","target","placeholder","map","gif","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.972149c6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from './keypair.json'\n\nimport idl from \"./idl.json\";\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// const TEST_GIFS = [\n//   \"https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp\",\n//   \"https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g\",\n//   \"https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g\",\n//   \"https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp\",\n// ];\n\nconst App = () => {\n  const [walletAdrs, setWalletAdrs] = useState(null);\n  const [inpValue, setInpValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  // Check if PHANTOM wallet is connected or not\n  const checkWallet = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        console.log(solana);\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet is available\");\n\n          // checking if user is already loged in\n          const res = await solana.connect({ onlyIfTrusted: true });\n          console.log(\"Connected with public key\", res.publicKey.toString());\n\n          setWalletAdrs(res.publicKey.toString());\n        }\n      } else {\n        console.log(\"wallet not found, please download it\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkWallet();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAdrs) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAdrs]);\n\n  // Authenticate user\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const res = await solana.connect();\n\n      console.log(\"connected public key:\", res.publicKey.toString());\n\n      setWalletAdrs(res.publicKey.toString());\n    }\n  };\n\n  // handle input\n  const onInpChange = (e) => {\n    setInpValue(e.target.value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  // send Gif to Solana Network\n  const sendGif = async () => {\n    if (inpValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInpValue('');\n    console.log('Gif link:', inpValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inpValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inpValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={walletAdrs ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          <p className=\"sub-text\">\n            Wallet Address: 0x{walletAdrs}\n          </p>\n          {!walletAdrs && (\n            <button onClick={connectWallet} className=\"btn\">\n              Connect Your Phantom Wallet\n            </button>\n          )}\n\n          {walletAdrs && (\n            <div className=\"connected-container\">\n              {/* Go ahead and add this input and button to start */}\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  sendGif();\n                }}\n              >\n                <input\n                  type=\"text\"\n                  value={inpValue}\n                  onChange={onInpChange}\n                  placeholder=\"Enter gif link!\"\n                />\n                <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                  Submit\n                </button>\n              </form>\n\n              {!gifList ? (\n                <button\n                  className=\"cta-button submit-gif-button\"\n                  onClick={createGifAccount}\n                >\n                  Do One-Time Initialization For GIF Program Account\n                </button>\n              ) : (\n                <div className=\"gif-grid\">\n                  {gifList.map((gif) => (\n                    <div className=\"gif-item\" key={gif}>\n                      <img src={gif.gifLink} alt={gif} />\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}